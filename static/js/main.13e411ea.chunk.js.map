{"version":3,"sources":["tango.js","serviceWorker.js","index.js","image/BlankCard.png"],"names":["tango","props","GetCSV","reqq","XMLHttpRequest","open","send","onload","Papa","parse","responseText","header","delimiter","complete","buf","console","log","data","convertCSVtoArray","SetNextWord","Tango","a","Math","floor","random","length","setState","English","Japanese","str","nextClick","e","state","isFlipped","document","getElementById","style","visibility","preventDefault","prevState","setTimeout","undefined","handleClick","bind","this","className","flipSpeedFrontToBack","flipSpeedBackToFront","flipDirection","infinite","width","id","src","BlankCard","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"4UAMqBA,E,kDACjB,WAAaC,GAAQ,IAAD,8BAChB,cAAMA,IAUVC,OAAS,WACL,IAAIC,EAAO,IAAIC,eACfD,EAAKE,KAAK,MAAO,aAAY,GAC7BF,EAAKG,KAAK,MAEVH,EAAKI,OAAS,WACVC,IAAKC,MAAMN,EAAKO,aAAa,CACzBC,QAAO,EACPC,UAAU,IAEVC,SAAS,SAACC,GACNC,QAAQC,IAAIF,EAAIG,MAChB,EAAKC,kBAAkBJ,EAAIG,WAvBvB,EA6BpBE,YAAc,SAACC,GACX,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMK,OAAS,IACnD,EAAKC,SAAS,CACVC,QAAQP,EAAMC,GAAN,UAEZ,EAAKK,SAAS,CACVE,SAASR,EAAMC,GAAN,YAnCG,EAuCpBH,kBAAoB,SAACW,GACjB,EAAKH,SAAS,CACVN,MAAMS,IAEV,EAAKV,YAAYU,IA3CD,EAuDpBC,UAAY,SAACC,GAAM,IACRX,EAAS,EAAKY,MAAdZ,MACa,EAAKY,MAAlBC,WAGHC,SAASC,eAAe,QAAQC,MAAMC,WAAa,SACnDN,EAAEO,iBACF,EAAKZ,UAAS,SAAAa,GAAS,MAAK,CAAEN,WAAYM,EAAUN,cACpDO,YAAW,WACP,EAAKrB,YAAYC,GACjBc,SAASC,eAAe,QAAQC,MAAMC,WAAa,YACrD,MAEF,EAAKlB,YAAYC,IAlErB,EAAKY,MAAQ,CACTC,WAAW,EACXb,WAAMqB,EACNd,QAAQ,GACRC,SAAS,IAEb,EAAKc,YAAc,EAAKA,YAAYC,KAAjB,gBARH,E,gEA+ChBC,KAAK1C,W,kCAGG6B,GACRA,EAAEO,iBACFM,KAAKlB,UAAS,SAAAa,GAAS,MAAK,CAAEN,WAAYM,EAAUN,gB,+BAqBpD,OAAQ,6BACJ,wBAAKY,UAAU,eAAf,wCACA,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAeZ,UAAWW,KAAKZ,MAAMC,UAAYa,qBAAsB,EACnEC,qBAAsB,EAAKC,cAAc,WAAWC,SAAS,OAAOC,MAAM,SAC1E,yBAAKC,GAAG,QACJ,yBAAKA,GAAG,OAAOC,IAAKC,IAAWC,QAASV,KAAKF,YAAaG,UAAU,aACpE,2BAAID,KAAKZ,MAAML,UAEnB,yBAAKwB,GAAG,QACJ,yBAAKA,GAAG,OAAOC,IAAKC,IAAWC,QAASV,KAAKF,YAAaG,UAAU,aACpE,2BAAID,KAAKZ,MAAMJ,YAGvB,4BAAQiB,UAAU,aAAaS,QAASV,KAAKd,WAA7C,wC,GAxFmByB,aCMfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7B,SAASC,eAAe,SDyHpB,kBAAmB6B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.13e411ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport ReactCardFlip from 'react-card-flip';\r\nimport Papa from 'papaparse';\r\nimport \"./tango.css\";\r\nimport BlankCard from './image/BlankCard.png';\r\nexport default class tango extends Component  {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            isFlipped: false,\r\n            Tango:undefined,\r\n            English:\"\",\r\n            Japanese:\"\",\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    GetCSV = () =>{\r\n        var reqq = new XMLHttpRequest();\r\n        reqq.open(\"get\", 'tango.csv',true);\r\n        reqq.send(null);\r\n\r\n        reqq.onload = () =>{\r\n            Papa.parse(reqq.responseText,{\r\n                header:true,\r\n                delimiter:',',\r\n\r\n                complete:(buf) =>{\r\n                    console.log(buf.data);\r\n                    this.convertCSVtoArray(buf.data);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    SetNextWord = (Tango) =>{\r\n        var a = Math.floor(Math.random() * (Tango.length + 1));\r\n        this.setState({\r\n            English:Tango[a][\"English\"]\r\n        })\r\n        this.setState({\r\n            Japanese:Tango[a][\"Japanese\"]\r\n        })\r\n    }\r\n\r\n    convertCSVtoArray = (str) =>{\r\n        this.setState({\r\n            Tango:str\r\n        })\r\n        this.SetNextWord(str);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.GetCSV();\r\n    }\r\n\r\n    handleClick(e) {\r\n        e.preventDefault();\r\n        this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\r\n    }\r\n\r\n    nextClick = (e) =>{\r\n        const {Tango} = this.state;\r\n        const {isFlipped} = this.state;\r\n        \r\n        if(isFlipped){\r\n            document.getElementById(\"card\").style.visibility = \"hidden\";\r\n            e.preventDefault();\r\n            this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\r\n            setTimeout(() =>{\r\n                this.SetNextWord(Tango);\r\n                document.getElementById(\"card\").style.visibility = \"visible\";\r\n            },300)\r\n        }else{\r\n            this.SetNextWord(Tango);\r\n        }\r\n    }\r\n\r\n      render() {\r\n        return (<div>\r\n            <h1  className=\"TangoDaimei\">単語長アプリ</h1>\r\n            <div className=\"cardPlace\">\r\n                <ReactCardFlip isFlipped={this.state.isFlipped}  flipSpeedFrontToBack={1.0}\r\n                    flipSpeedBackToFront={1.0} flipDirection=\"vertical\" infinite=\"true\" width=\"300px\">\r\n                    <div id=\"card\">\r\n                        <img id=\"card\" src={BlankCard} onClick={this.handleClick} className=\"cardSize\" />\r\n                        <p>{this.state.English}</p>\r\n                    </div>\r\n                    <div id=\"card\">\r\n                        <img id=\"card\" src={BlankCard} onClick={this.handleClick} className=\"cardSize\" />\r\n                        <p>{this.state.Japanese}</p>\r\n                    </div>         \r\n                </ReactCardFlip>\r\n                <button className='NextButton' onClick={this.nextClick}>次の単語へ</button>       \r\n            </div>\r\n          </div>\r\n        )\r\n      }\r\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Tango from './tango';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Tango />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/BlankCard.4cdd3cb6.png\";"],"sourceRoot":""}